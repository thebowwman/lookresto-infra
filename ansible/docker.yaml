- name: Install Docker
  hosts: lightsail
  become: yes
  tasks:
    - name: Update apt and install prerequisites
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
        state: present
        update_cache: yes
      when: ansible_distribution == "Ubuntu"

    - name: Ensure keyrings directory exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
      when: ansible_distribution == "Ubuntu"

    - name: Add Docker’s official GPG key
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'
      when: ansible_distribution == "Ubuntu"

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_lsb.codename }} stable"
        filename: docker
        state: present
      when: ansible_distribution == "Ubuntu"

    - name: Install Docker packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest
        update_cache: yes
      when: ansible_distribution == "Ubuntu"
      register: docker_install


    - name: Reboot if required (e.g. kernel upgrade)
      ansible.builtin.reboot:
        reboot_timeout: 600
      when: docker_install is changed

    - name: Start and enable Docker
      ansible.builtin.service:
        name: docker
        state: started
        enabled: yes
      when: ansible_distribution == "Ubuntu"

    - name: Reset SSH connection so group membership takes effect
      ansible.builtin.meta: reset_connection

    - name: Add default user to docker group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_distribution == "Ubuntu"


      # --- Deployment part ---

    - name: Ensure project directory exists
      ansible.builtin.file:
        path: /home/ubuntu/project
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'


    - name: Copy full repo to EC2
      ansible.posix.synchronize:
        src: "{{ lookup('env','GITHUB_WORKSPACE') }}/"
        dest: /home/ubuntu/project/
        rsync_opts:
          - "--exclude=.git"
          - "--exclude=.github"
          - "--exclude=node_modules"
          - "--exclude=infra/aws/.terraform"
      delegate_to: localhost

    - name: Docker login to GHCR
      ansible.builtin.shell: |
        echo "{{ lookup('env','GHCR_TOKEN') }}" | docker login ghcr.io -u thebowwman --password-stdin
      args:
        executable: /bin/bash
      register: docker_login
      changed_when: false
      failed_when: "'Login Succeeded' not in docker_login.stdout"

    - name: Show Docker login result
      ansible.builtin.debug:
        var: docker_login.stdout

    - name: Ensure make is installed
      ansible.builtin.apt:
        name: make
        state: present
        update_cache: yes
      become: true

    - name: Ensure logs directory exists
      ansible.builtin.file:
        path: /home/ubuntu/project/logs
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0777'

    - name: Clean up docker
      ansible.builtin.command:
        cmd: make clean-docker ENVFILE=infra/.env.uat
      args:
        chdir: /home/ubuntu/project
      environment:
        DOCKER_BUILDKIT: "1"
        APP_VERSION: "{{ app_version }}"

    - name: Start dependencies (db + nats)
      ansible.builtin.command:
        cmd: docker compose -f infra/docker-compose.base.yml -f infra/docker-compose.uat.yml --env-file infra/.env.uat up -d nats postgres redis
      args:
        chdir: /home/ubuntu/project
      environment:
        DOCKER_BUILDKIT: "1"
        APP_VERSION: "{{ app_version }}"

    - name: Wait for Postgres to be ready
      ansible.builtin.shell: |
        until docker exec uat-postgres pg_isready -U app; do
          echo "⏳ Waiting for Postgres..."
          sleep 2
        done
      retries: 10
      delay: 3
      register: pg_ready
      until: pg_ready.rc == 0

    - name: Run DB migrations per module
      ansible.builtin.shell: |
        for m in restaurant user kernel notification shared; do
          echo "🚀 Migrating $m..."
          make migrate-up module=$m ENVFILE=infra/.env.uat || true
        done
      args:
        chdir: /home/ubuntu/project
      environment:
        DOCKER_BUILDKIT: "1"
        APP_VERSION: "{{ app_version }}"
      register: migration_result
      failed_when: >
        (migration_result.rc not in [0])
        and ("no change" not in migration_result.stderr)

    - name: Start app service
      ansible.builtin.command:
        cmd: docker compose -f infra/docker-compose.base.yml -f infra/docker-compose.uat.yml --env-file infra/.env.uat up -d app
      args:
        chdir: /home/ubuntu/project
      environment:
        DOCKER_BUILDKIT: "1"
        APP_VERSION: "{{ app_version }}"

    - name: Check running containers
      ansible.builtin.command: >
        docker ps --format "table {{'{{.Names}}'}}\t{{'{{.Status}}'}}\t{{'{{.Ports}}'}}"
      register: docker_ps

    - name: Show running containers
      ansible.builtin.debug:
        var: docker_ps.stdout_lines
