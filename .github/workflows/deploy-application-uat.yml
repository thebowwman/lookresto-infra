# .github/workflows/deploy-application-uat.yml
name: Deploy Application - UAT

on:
  repository_dispatch:
    types: [deploy-backend]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Docker image tag to deploy (e.g., v1.2.3 or latest)"
        required: true
        default: "latest"
      run_migrations:
        description: "Run database migrations"
        required: true
        type: boolean
        default: true
  workflow_call:
    inputs:
      lightsail_ip:
        description: "Lightsail IP of the target server"
        required: false
        type: string
      image_tag:
        description: "Docker image tag to deploy"
        required: false
        type: string
        default: "latest"
      run_migrations:
        description: "Run database migrations"
        required: false
        type: boolean
        default: true
    secrets:
      AWS_EC2_SSH_PRIVATE_KEY:
        required: true
      BACKEND_REPO_PAT:
        required: false
      GHCR_TOKEN:
        required: true
      SLACK_WEBHOOK_URL:
        required: false

permissions:
  id-token: write
  contents: read

env:
  ENVIRONMENT: uat
  IMAGE_TAG: ${{ github.event.inputs.image_tag || github.event.client_payload.version || 'latest' }}
  RUN_MIGRATIONS: ${{ github.event.inputs.run_migrations || 'true' }}
  UAT_DOMAIN: uat.lookresto.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: UAT
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::341126269796:role/github-actions-role
          aws-region: eu-west-3

      - name: Get Lightsail IP from SSM
        id: get-ip
        run: |
          if [ -n "${{ inputs.lightsail_ip }}" ]; then
            LIGHTSAIL_IP="${{ inputs.lightsail_ip }}"
          else
            LIGHTSAIL_IP=$(aws ssm get-parameter --name "/lightsail/uat/ip" --query "Parameter.Value" --output text)
          fi
          echo "lightsail_ip=$LIGHTSAIL_IP" >> $GITHUB_OUTPUT
          echo "Target server: $LIGHTSAIL_IP"

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ steps.get-ip.outputs.lightsail_ip }} >> ~/.ssh/known_hosts

      - name: Checkout Backend Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/lookresto
          token: ${{ secrets.BACKEND_REPO_PAT || github.token }}
          path: backend


      - name: Ensure Docker network exists
        run: |
          echo "üõ† Ensuring Docker network 'lookresto-net' exists..."
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.lightsail_ip }} bash << 'EOF'
            if ! docker network ls --format '{{.Name}}' | grep -wq 'lookresto-net'; then
              echo "Creating Docker network 'lookresto-net'..."
              docker network create lookresto-net
            else
              echo "Docker network 'lookresto-net' already exists."
            fi
          EOF

      - name: Copy Migrations to Server
        run: |
          echo "üì¶ Copying migration files to server..."
          
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.lightsail_ip }} \
            'mkdir -p /opt/app/migrations'
          
          for module in restaurant kernel notification shared user; do
            if [ -d "backend/$module/migrations" ]; then
              echo "Copying $module migrations..."
              scp -i ~/.ssh/id_rsa -r \
                backend/$module/migrations \
                ubuntu@${{ steps.get-ip.outputs.lightsail_ip }}:/opt/app/migrations/$module
            fi
          done
    

      - name: Copy Docker Compose files
        run: |
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            $GITHUB_WORKSPACE/docker/compose/docker-compose.base.yml \
            ubuntu@${{ steps.get-ip.outputs.lightsail_ip }}:/opt/app/docker-compose.base.yml
          
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no \
            $GITHUB_WORKSPACE/docker/compose/docker-compose.uat.yml \
            ubuntu@${{ steps.get-ip.outputs.lightsail_ip }}:/opt/app/docker-compose.uat.yml

      - name: Create .env file on server
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.lightsail_ip }} << EOF
            cat > /opt/app/.env << 'ENVFILE'
          APP_VERSION=${{ env.IMAGE_TAG }}
          DB_URL=postgres://app:secret@postgres:5432/appdb?sslmode=disable
          NATS_URL=${{ vars.UAT_NATS_URL || 'nats://nats:4222' }}
          APP_PORT=8080
          REDIS_ADDR='redis:6379'
          GOOGLE_CLIENT_ID=${{ vars.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET=${{ vars.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI=${{ vars.GOOGLE_REDIRECT_URI }}
          JWT_SECRET_KEY=${{ vars.JWT_SECRET_KEY }}
          ACCESS_TOKEN_TTL=${{ vars.ACCESS_TOKEN_TTL || '15m' }}
          REFRESH_TOKEN_TTL=${{ vars.REFRESH_TOKEN_TTL || '7d' }}
          ACCOUNT_SID=${{ vars.TWILIO_ACCOUNT_SID }}
          TWILIO_TOKEN=${{ vars.TWILIO_AUTH_TOKEN }}
          FROM_NUMBER=${{ vars.TWILIO_PHONE_NUMBER }}
          ENVFILE
          EOF

      - name: Start Infrastructure Services
        run: |
          echo "üöÄ Starting infrastructure services..."
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.lightsail_ip }} << 'EOF'
            cd /opt/app
            
            # Start all infrastructure services including nginx-proxy and letsencrypt
            docker compose -f docker-compose.base.yml -f docker-compose.uat.yml up \
              postgres redis nats nginx-proxy letsencrypt -d
            
            echo "‚è≥ Waiting for services to be ready..."
            
            # Wait for postgres
            for i in {1..30}; do
              if docker exec uat-postgres pg_isready -U app; then
                echo "‚úÖ Postgres is ready!"
                break
              fi
              echo "Waiting for postgres... ($i/30)"
              sleep 2
            done
            
            # Wait for NATS
            for i in {1..30}; do
              if docker exec nats nc -z localhost 4222; then
                echo "‚úÖ NATS is ready!"
                break
              fi
              echo "Waiting for NATS... ($i/30)"
              sleep 2
            done
            
            # Wait for Redis
            for i in {1..30}; do
              if docker exec redis redis-cli ping | grep -q PONG; then
                echo "‚úÖ Redis is ready!"
                break
              fi
              echo "Waiting for Redis... ($i/30)"
              sleep 2
            done
            
            # Wait for nginx-proxy
            for i in {1..30}; do
              if docker ps | grep -q nginx-proxy-uat; then
                echo "‚úÖ Nginx-proxy is ready!"
                break
              fi
              echo "Waiting for nginx-proxy... ($i/30)"
              sleep 2
            done
          EOF

      - name: Run Database Migrations
        if: env.RUN_MIGRATIONS == 'true'
        run: |
          echo "üîÑ Running migrations..."
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.lightsail_ip }} bash << 'EOF'
            cd /opt/app
            NETWORK="lookresto-net"
            echo "Using network: $NETWORK"
      
            for module in restaurant user kernel notification shared; do
              if [ -d "migrations/$module" ]; then
                echo "Running migrations for $module..."
                docker run --rm \
                  --network "$NETWORK" \
                  -v "$(pwd)/migrations/$module:/migrations" \
                  migrate/migrate:latest \
                  -path=/migrations \
                  -database "postgres://app:secret@postgres:5432/appdb?sslmode=disable&x-migrations-table=${module}_migrations" up
              fi
            done
          EOF

      - name: Deploy Application
        run: |
          echo "üöÄ Deploying application version: ${{ env.IMAGE_TAG }}"
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.lightsail_ip }} << EOF
            cd /opt/app
            
            # Log in to GitHub Container Registry
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull new image
            docker pull ghcr.io/thebowwman/lookresto:${{ env.IMAGE_TAG }}
            
            # Start the application
            docker compose -f docker-compose.base.yml -f docker-compose.uat.yml up -d app
            
            # Wait for application to start
            echo "‚è≥ Waiting for application to start..."
            sleep 10
            
            # Show running containers
            docker ps
          EOF

      - name: Wait for SSL Certificate
        run: |
          echo "üîê Waiting for SSL certificate to be issued..."
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.lightsail_ip }} << 'EOF'
            MAX_RETRIES=60
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              # Check if certificate exists
              if docker exec nginx-proxy-uat ls /etc/nginx/certs/${{ env.UAT_DOMAIN }}.crt 2>/dev/null; then
                echo "‚úÖ SSL certificate issued!"
                exit 0
              fi
              
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "‚è≥ Waiting for SSL certificate... ($RETRY_COUNT/$MAX_RETRIES)"
              sleep 5
            done
            
            echo "‚ö†Ô∏è SSL certificate not issued yet, but continuing..."
            docker logs letsencrypt-uat --tail 50
          EOF

      - name: Health Check
        run: |
          echo "üè• Running health check..."
          MAX_RETRIES=30
          RETRY_COUNT=0
          
          # Try HTTPS first, fallback to HTTP if SSL not ready
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Try HTTPS
            if curl -sf --connect-timeout 5 "https://${{ env.UAT_DOMAIN }}/healthz" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed (HTTPS)!"
              exit 0
            fi
            
            # Fallback to HTTP if HTTPS not ready
            if curl -sf --connect-timeout 5 "http://${{ env.UAT_DOMAIN }}/healthz" > /dev/null 2>&1; then
              echo "‚úÖ Health check passed (HTTP - SSL may still be provisioning)!"
              exit 0
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "‚è≥ Waiting for application... ($RETRY_COUNT/$MAX_RETRIES)"
            sleep 5
          done
          
          echo "‚ùå Health check failed after $MAX_RETRIES attempts"
          
          # Debug information
          echo "Checking nginx-proxy logs:"
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.lightsail_ip }} \
            "docker logs nginx-proxy-uat --tail 50"
          
          exit 1

      - name: Deployment Summary
        if: success()
        run: |
          echo "### ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** UAT" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ghcr.io/thebowwman/lookresto:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://${{ env.UAT_DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "**Server IP:** ${{ steps.get-ip.outputs.lightsail_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        continue-on-error: true
        with:
          status: ${{ job.status }}
          text: |
            UAT Deployment: ${{ job.status }}
            Version: ${{ env.IMAGE_TAG }}
            URL: https://${{ env.UAT_DOMAIN }}
            Deployed by: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "‚ö†Ô∏è Deployment failed, initiating rollback..."
          ssh -i ~/.ssh/id_rsa ubuntu@${{ steps.get-ip.outputs.lightsail_ip }} << 'EOF'
            cd /opt/app
            docker compose -f docker-compose.uat.yml down app
            docker compose -f docker-compose.uat.yml up -d app
          EOF
